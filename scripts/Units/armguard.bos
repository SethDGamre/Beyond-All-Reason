#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, barrel1, barrel2, sleeves;

//smasel remove debugGameFrame
static-var  nextBarrel, trajectoryMode, lastHeading, aimingState, switchAimModeFrame, queueLowFrame, errorTriggerFrame, debugGameFrame;

#define SIGNAL_AIM						1
#define RESET_LOW_DELAY_FRAMES			10
#define RESET_HIGH_DELAY_FRAMES			450
#define AIMING_NEITHER					0
#define AIMING_LOW						1
#define AIMING_HIGH						2


Create()
{
	hide flare1;
	hide flare2;
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache sleeves;
	dont-cache turret;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade sleeves;
	dont-shade turret;
	nextBarrel = 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

//smasel WATCH THE FORT, I'll remove this when debugging is complete.
// debugTimer(){
// 	while (TRUE){
// 		debugGameFrame = get GAME_FRAME;
// 		get PRINT(debugGameFrame, switchAimModeFrame, aimingState, queueLowFrame);
// 		sleep 1000;
// 	}
// }

smartAimSelect(weaponNumber)
{
	var gameFrame; 
	gameFrame = (get GAME_FRAME);

	//smasel queue low trajectory steal
	if (weaponNumber == AIMING_LOW){
		queueLowFrame = (switchAimModeFrame + RESET_LOW_DELAY_FRAMES);
	}

	//smasel i'm gonna have to put the framechecks here just in case an invalid target
	if (switchAimModeFrame < gameFrame){
		aimingState = AIMING_NEITHER;
	}

	//smasel block if another weapon is firing
	if ((aimingState != AIMING_NEITHER) && (weaponNumber != aimingState)){
		return (0);
	}

	//smasel if aimingState is neither, set aimingState and its expiration
	if (aimingState == AIMING_NEITHER){

		//stop bonus shots
		var lowReloadState, highReloadState;
		lowReloadState = (get WEAPON_RELOADSTATE(AIMING_LOW));
		highReloadState = (get WEAPON_RELOADSTATE(AIMING_HIGH));

		if (weaponNumber == AIMING_LOW){
			switchAimModeFrame = (gameFrame + RESET_LOW_DELAY_FRAMES);
			aimingState = AIMING_LOW;
			if (switchAimModeFrame < highReloadState){
				switchAimModeFrame = highReloadState;
			}
		} else if ((weaponNumber == AIMING_HIGH) && (queueLowFrame < gameFrame)){
			switchAimModeFrame = (gameFrame + RESET_HIGH_DELAY_FRAMES);
			if (switchAimModeFrame < lowReloadState){
				switchAimModeFrame = lowReloadState;
			}
			aimingState = AIMING_HIGH;
		}
		return (0);
	}	
}

restoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM;
	sleep 3500;
	aimingState = AIMING_NEITHER;
	if(lastHeading > <-180.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	if(lastHeading > <-135.000000>)
	{
		turn turret to y-axis <270.000000> speed <30.000000>;
	}
	if(lastHeading > <-45.000000>)
	{
		turn turret to y-axis <0.000000> speed <30.000000>;
	}
	if(lastHeading > <45.000000>)
	{
		turn turret to y-axis <90.000000> speed <30.000000>;
	}
	if(lastHeading > <135.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	turn sleeves to x-axis <0.000000> speed <45.000000>;
}

aimCommon(heading, pitch)
{
	turn turret to y-axis heading speed <30.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <45.000000>;
	lastHeading = heading;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script restoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script smartAimSelect(AIMING_LOW);
	if (aimingState != AIMING_LOW){
		return(0);
	}

	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;

	call-script aimCommon(heading, pitch);

	return (1);
}

AimSecondary(heading, pitch)
{
	start-script smartAimSelect(AIMING_HIGH);
	if (aimingState != AIMING_HIGH){
		return (0);
	}
	signal SIGNAL_AIM;
	set-signal-mask SIGNAL_AIM;



	call-script aimCommon(heading, pitch);

	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = sleeves;
}

AimFromSecondary(piecenum)
{
	piecenum = sleeves;
}

fireCommon()
{
if( nextBarrel == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-6.250000] now;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
	if( nextBarrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-6.250000] now;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [2.500000];
	}
	nextBarrel = !nextBarrel;
}

FirePrimary()
{
	call-script fireCommon();
}

FireSecondary()
{
	call-script fireCommon();
}

QueryPrimary(piecenum)
{
	if( nextBarrel == 0 )
	{
		piecenum = flare1;
	}
	if( nextBarrel == 1 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( nextBarrel == 0 )
	{
		piecenum = flare1;
	}
	if( nextBarrel == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeves type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeves type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}